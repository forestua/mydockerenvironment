version: '3'
services:
    web:
        image: nginx:alpine
        user: "root"
        volumes:
            - "./etc/nginx/default.conf:/etc/nginx/conf.d/default.conf"
            - "./etc/ssl:/etc/ssl"
            - "./web:/var/www/html"
            - "./etc/nginx/default.template.conf:/etc/nginx/conf.d/default.template"
        ports:
            - "8000:80"
            - "3000:443"
        environment:
            - NGINX_HOST=localhost
        command: /bin/sh -c "envsubst '$$NGINX_HOST' < /etc/nginx/conf.d/default.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
        restart: always
        depends_on:
            - php
            - mysqldb
    php:
        image: nanoninja/php-fpm:latest
        #build:
            #context: ./etc/php
            #dockerfile: Dockerfile
        restart: always
        volumes:
            - "./etc/php/php.ini:/usr/local/etc/php/conf.d/php.ini"
            - "./web:/var/www/html"
        command: php artisan migrate
    composer:
        image: "composer"
        volumes:
            - "./web:/app"
        command: install
    myadmin:
        image: phpmyadmin/phpmyadmin
        container_name: phpmyadmin
        ports:
            - "8080:80"
        environment:
            - PMA_ARBITRARY=1
            - PMA_HOST=mysql
        restart: always
        depends_on:
            - mysqldb
    mysqldb:
        image: mysql
        container_name: mysql
        restart: always
        command: --default-authentication-plugin=mysql_native_password
        env_file:
            - ".env"
        environment:
            - MYSQL_HOST=mysql
            - MYSQL_DATABASE=lara
            - MYSQL_ROOT_PASSWORD=1111
            #- MYSQL_USER=dev
            #- MYSQL_PASSWORD=dev
        ports:
            - "8989:3306"
        volumes:
            - "./data/db/mysql:/var/lib/mysql"
        #command: mysql -u root -proot -e "UPDATE `mysql`.`proc` p SET definer = 'user@%' WHERE definer='root@%'"
    node:
        image: node:10
        user: "node"
        restart: always
        environment:
        - NODE_ENV=production
        volumes:
            - "./web:/app"
        working_dir: /app
        command: "npm install"
        expose:
        - "8081"
        #command: ["npm", "install"]